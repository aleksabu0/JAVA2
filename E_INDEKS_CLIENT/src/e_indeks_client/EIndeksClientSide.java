package e_indeks_client;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
//import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;


@SuppressWarnings("serial")
public class EIndeksClientSide extends javax.swing.JFrame {

    private Socket socket;
    public static BufferedReader br;
    public static PrintWriter pw;
    public static String ime;
    public static String prezime;
    public static String jmbg;
    public static String indeks;
    //private ReceiveMessageFromServer rmfs;
    /**
     * Creates new form EIndeksClientSide
     */
    
    
    public EIndeksClientSide() {
        initComponents();
        
    }

    //getteri i setteri za komponente koje ce nam trebati u ReceiveMessageFromServer klasi
    public JTextArea getTaReceivedMessages() {
        return taReceivedMessages;
    }
    
    public void setTaReceivedMessages(String poruka) {
        taReceivedMessages.append(poruka + "\n");
    }

    public JComboBox<String> getCbUsers() {
        return cbUsers;
    }
    
    
    public BufferedReader getBr() {
        return br;
    }
    
    public Socket getSoc() {
        return socket;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jFrame1 = new javax.swing.JFrame();
        jButton3 = new javax.swing.JButton();
        jRoleField = new javax.swing.JTextField();
        jUsernameField = new javax.swing.JTextField();
        jPasswordField = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButtonLogin = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel7.setText("Password");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jButton3.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jRoleField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRoleFieldActionPerformed(evt);
            }
        });

        jUsernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUsernameFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("Username");

        jLabel6.setText("Password");

        jLabel8.setText("Role");

        jButtonLogin.setText("Click here to login");
        jButtonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoginActionPerformed(evt);
            }
        });

        jLabel9.setText("Login");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jLabel5)
                .addGap(150, 150, 150)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(159, 159, 159)
                .addComponent(jLabel9)
                .addGap(70, 70, 70))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jRoleField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(jButtonLogin)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(100, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRoleField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(132, 132, 132))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jUsernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUsernameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jUsernameFieldActionPerformed

    private void jRoleFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRoleFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRoleFieldActionPerformed

    private void jButtonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoginActionPerformed
        
        if(!jUsernameField.getText().equals("") && !jPasswordField.getText().equals("") && !jRoleField.getText().equals("")){
            try {
                //Kreiraj novi socket (ako nije localhost, treba promeniti IP adresu)
                this.socket = new Socket("127.0.0.1", 6001);
                //napravi BufferedReader i PrintWriter kako bi slao i primao poruke
                this.br = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));
                this.pw = new PrintWriter(new OutputStreamWriter(this.socket.getOutputStream()), true);
                //za prijem poruka od servera (stizace asinhrono) koristi poseban thread
                //da bismo u novom thread-u mogli da menjamo sadrzaj komponenti (npr Combo Box-a)
                //konstruktoru novog thread-a se prosledjuje this
                //this.rmfs = new ReceiveMessageFromServer(this);
                //Thread thr = new Thread(rmfs);
                //thr.start();

                //btnSendUserName.setEnabled(true);
                //tfMyName.setEnabled(true);

            } catch (IOException ex) {
                Logger.getLogger(EIndeksClientSide.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (!this.jUsernameField.getText().equals("") && !this.jPasswordField.getText().equals("")) {
                    this.pw.println(jUsernameField.getText());
                    this.pw.println(jPasswordField.getText());
                    this.pw.println(jRoleField.getText());
            } else {

                    //cbUsers.setEnabled(false);
                    //tfMessage.setEnabled(false);
                    //btnSend.setEnabled(false);
            }
            String mode;
            try {
                mode = this.br.readLine();
                System.out.println(mode);
                if(mode.equals("STUDENT MODE")){
                    ime = this.br.readLine();
                    System.out.println(ime);
                    prezime = this.br.readLine();
                    System.out.println(prezime);
                    jmbg = this.br.readLine();
                    System.out.println(jmbg);
                    indeks = this.br.readLine();
                    System.out.println(indeks);
                    SecondJFrame secondFrame = new SecondJFrame();
                    secondFrame.setVisible(true);
                    setVisible(false);
                }
                else if(mode.equals("ADMIN MODE")){
                    ThirdJFrame thirdFrame = new ThirdJFrame();
                    thirdFrame.setVisible(true);
                    setVisible(false);
                }
                else if(mode.equals("FAIL")){
                    System.out.println("FAIL");
                }
            } catch (IOException ex) {
                Logger.getLogger(EIndeksClientSide.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonLoginActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {                                           
        try {
            //Kreiraj novi socket (ako nije localhost, treba promeniti IP adresu)
            this.socket = new Socket("127.0.0.1", 6001);
            //napravi BufferedReader i PrintWriter kako bi slao i primao poruke
            this.br = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));
            this.pw = new PrintWriter(new OutputStreamWriter(this.socket.getOutputStream()), true);
            //za prijem poruka od servera (stizace asinhrono) koristi poseban thread
            //da bismo u novom thread-u mogli da menjamo sadrzaj komponenti (npr Combo Box-a)
            //konstruktoru novog thread-a se prosledjuje this
            //this.rmfs = new ReceiveMessageFromServer(this);
            //Thread thr = new Thread(rmfs);
            //thr.start();
            
            btnSendUserName.setEnabled(true);
            tfMyName.setEnabled(true);

        } catch (IOException ex) {
            Logger.getLogger(EIndeksClientSide.class.getName()).log(Level.SEVERE, null, ex);
        }

        
    }                                          

    //////////SLANJE PORUKE/////////
	private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {                                        
    	if (true) {
    		if (!this.tfMyName.getText().equals("") && !this.tfMyName.getText().equals(getCbUsers().getSelectedItem())) {
    			String porukaZaIspis = "Ja" + ": " + this.tfMessage.getText();
    			String porukaZaSlanje = this.cbUsers.getSelectedItem().toString() + ": " + this.tfMessage.getText();
    			System.out.println(this.cbUsers.getItemAt(0));
    			this.taReceivedMessages.append(porukaZaIspis + "\n");    		
        		this.pw.println(porukaZaSlanje);
    		
    		} else {
    			JOptionPane.showMessageDialog(null, "Ne mozes sebi slati poruke!");
    		}
    		
    	}
    	
    	
    }                                       
    
    //////////SLANJE USERNAME-a/////////
    private void btnSendUserNameActionPerformed(java.awt.event.ActionEvent evt) throws IOException {                                                
           	
    	if (!this.tfMyName.getText().equals("")) {
    		this.pw.println(tfMyName.getText());
                this.pw.println(tfMyName.getText());
                this.pw.println(tfMyName.getText());
    		cbUsers.setEnabled(true);
    		tfMessage.setEnabled(true);
    		btnSend.setEnabled(true);
    		tfMyName.setEnabled(false);
    		btnSendUserName.setEnabled(false);
    	} else {
    		
    		cbUsers.setEnabled(false);
    		tfMessage.setEnabled(false);
    		btnSend.setEnabled(false);
    	}
    	
    	
    } 
    
    private void btnLogin(java.awt.event.ActionEvent evt) throws IOException {                                                
           	
    	if (!this.jUsernameField.getText().equals("") && !this.jPasswordField.getText().equals("")) {
    		this.pw.println(jUsernameField.getText());
                this.pw.println(jPasswordField.getText());
                this.pw.println(jRoleField.getText());
    		cbUsers.setEnabled(true);
    		tfMessage.setEnabled(true);
    		btnSend.setEnabled(true);
    		tfMyName.setEnabled(false);
    		btnSendUserName.setEnabled(false);
    	} else {
    		
    		cbUsers.setEnabled(false);
    		tfMessage.setEnabled(false);
    		btnSend.setEnabled(false);
    	}
    	
    	
    }


    /**
     * @param args the command line arguments
     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                } else {
                	
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EIndeksClientSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EIndeksClientSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EIndeksClientSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EIndeksClientSide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } 
        //</editor-fold> 
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EIndeksClientSide().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnSendUserName;
    private javax.swing.JComboBox<String> cbUsers;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane spReceivedMessages;
    private javax.swing.JTextArea taReceivedMessages;
    private javax.swing.JTextField tfMessage;
    private javax.swing.JTextField tfMyName;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonLogin;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JTextField jRoleField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jUsernameField;
    // End of variables declaration//GEN-END:variables
}
